{"createdAt":"2025-07-30T08:04:32.738Z","updatedAt":"2025-07-30T09:05:59.000Z","id":"8jYDfOkSu4id1u4L","name":"My workflow 11","active":false,"isArchived":false,"nodes":[{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4o-mini"},"options":{}},"id":"0bd1ae97-a15a-432d-bdab-a9ba8bfbf714","name":"OpenAI Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","position":[1344,512],"typeVersion":1.2},{"parameters":{"promptType":"define","text":"={{ $json.text }}","hasOutputParser":true,"messages":{"messageValues":[{"message":"=Okay, I've further refined the system prompt to include only the \"content\" and \"priority\" fields in the JSON output for the Todoist tool. Here's the updated prompt:\n\n**System Prompt:**\n\n```\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \"Todoist\" tool and provide these JSON objects in a list.\n\n**Requirements:**\n\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\n\n    ```json\n    {\n      \"content\": \"[Task Description]\",\n      \"priority\": [Priority Level (1-4, where 4 is highest)]\n    }\n    ```\n\n    *   `content`: A clear and concise description of the task.\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\n\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \"Todoist\" tool.\n\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\n\n5.  **Limitations:**\n\n    *   Avoid very general or abstract sub-tasks.\n    *   Ensure that each sub-task is completable and measurable.\n    *   When creating sub-tasks, consider the user's skills and resources.\n    *   Ensure all the output is valid JSON format within a python list\n\n**User Input:**\n\nThe user will provide you with a task or project description in the following format:\n\n```\nProject Description: [User's Entered Task or Project Description]\n```\n\n**Example:**\n\n**User Input:**\n\n```\nProject Description: Plan a team offsite.\n```\n\n**LLM Response:**\n\n```python\n[\n  {\n    \"content\": \"Research potential offsite locations.\",\n    \"priority\": 3\n  },\n  {\n    \"content\": \"Determine the budget for the offsite.\",\n    \"priority\": 4\n  },\n  {\n    \"content\": \"Send out a survey to gather team preferences.\",\n    \"priority\": 3\n  },\n  {\n    \"content\": \"Book the chosen venue.\",\n    \"priority\": 4\n  },\n  {\n    \"content\": \"Plan team-building activities.\",\n    \"priority\": 2\n  }\n]\n```\n\n**Key Changes and Explanations:**\n\n*   **Simplified JSON Structure:** The JSON object now only includes `content` and `priority`.\n*   **Example Updated:** The example response reflects the simplified JSON format.\n*   **Conciseness:** The prompt is now more concise, focusing only on the necessary fields.\n\n**Jinja2 Template Version**\n\n```python\nfrom jinja2 import Template\n\ntemplate_string = \"\"\"\nYou are an AI agent acting as a project management assistant. The user will provide you with a task or project description. Your job is to break down this task or project into smaller, manageable sub-tasks. You will then format each sub-task into a JSON object suitable for input to the \"Todoist\" tool and provide these JSON objects in a list.\n\n**Requirements:**\n\n1.  **Sub-Task Decomposition:** Break down the task or project provided by the user into logical and actionable sub-tasks. Each sub-task should be self-contained, completable, and measurable.\n2.  **JSON Format for Todoist:** Format each sub-task as a JSON object with the following structure:\n\n    ```json\n    {\n      \"content\": \"[Task Description]\",\n      \"priority\": [Priority Level (1-4, where 4 is highest)]\n    }\n    ```\n\n    *   `content`: A clear and concise description of the task.\n    *   `priority`: An integer representing the task priority, ranging from 1 (lowest) to 4 (highest). Consider the importance and urgency of the task when assigning the priority.\n\n3.  **Tool Usage - Todoist JSON Output:** After decomposing the project into sub-tasks, you **MUST** format each sub-task into the JSON structure specified above and present all the JSON objects in a Python list. This list will be the direct input to the \"Todoist\" tool.\n\n4.  **Contextual Understanding:** Fully understand the context of the task or project provided by the user. If necessary, ask for additional information or clarification to resolve any ambiguities.\n\n5.  **Limitations:**\n\n    *   Avoid very general or abstract sub-tasks.\n    *   Ensure that each sub-task is completable and measurable.\n    *   When creating sub-tasks, consider the user's skills and resources.\n    *   Ensure all the output is valid JSON format within a python list\n\n**User Input:**\n\nThe user will provide you with a task or project description in the following format:\n\n```\nProject Description: {{ project_description }}\n```\n\n**Example:**\n\n**User Input:**\n\n```\nProject Description: Plan a team offsite.\n```\n\n**LLM Response:**\n\n```python\n[\n  {\n    \"content\": \"Research potential offsite locations.\",\n    \"priority\": 3\n  },\n  {\n    \"content\": \"Determine the budget for the offsite.\",\n    \"priority\": 4\n  },\n  {\n    \"content\": \"Send out a survey to gather team preferences.\",\n    \"priority\": 3\n  },\n  {\n    \"content\": \"Book the chosen venue.\",\n    \"priority\": 4\n  },\n  {\n    \"content\": \"Plan team-building activities.\",\n    \"priority\": 2\n  }\n]\n```\n\"\"\"\n\ntemplate = Template(template_string)\n\n# Example Usage\nproject_description = \"Plan a team offsite.\"\nprompt = template.render(project_description=project_description)\n\nprint(prompt)\n```\n \n"}]}},"id":"96122dd8-7b3a-4dd1-975b-4103c83ef3d4","name":"Basic LLM Chain","type":"@n8n/n8n-nodes-langchain.chainLlm","position":[1328,288],"typeVersion":1.5},{"parameters":{"updates":["message"],"additionalFields":{}},"id":"3ff1d948-6b37-4e1b-8eed-eae33f29972b","name":"Receive Telegram Messages","type":"n8n-nodes-base.telegramTrigger","position":[48,144],"webhookId":"4e2cd560-ae4e-4ed7-a8ea-984518404e51","typeVersion":1.1},{"parameters":{"rules":{"values":[{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"af30c479-4542-405f-b315-37c50c4e2bef","operator":{"type":"string","operation":"exists","singleValue":true},"leftValue":"={{ $json.message.voice.file_id }}","rightValue":""}]},"renameOutput":true,"outputKey":"Audio"},{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"a3ca8cd4-fbb2-40b5-829a-24724f2fbc85","operator":{"type":"string","operation":"exists","singleValue":true},"leftValue":"={{ $json.message.text || \"\" }}","rightValue":""}]},"renameOutput":true,"outputKey":"Text"},{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"9bcfdee0-2f09-4037-a7b9-689ef392371d","operator":{"type":"string","operation":"exists","singleValue":true},"leftValue":"error","rightValue":""}]},"renameOutput":true,"outputKey":"Error"}]},"options":{}},"id":"f5c1ef94-f20c-4414-a115-2c175367076c","name":"Voice or Text?","type":"n8n-nodes-base.switch","position":[400,224],"typeVersion":3.2},{"parameters":{"resource":"file","fileId":"={{ $json.message.voice.file_id }}"},"id":"81ddfde4-3701-4e06-9959-b34d2a04b5f1","name":"Fetch Voice Message","type":"n8n-nodes-base.telegram","position":[768,128],"webhookId":"23645237-4943-4c32-b18c-97c410cc3409","typeVersion":1.2},{"parameters":{"resource":"audio","operation":"translate","options":{}},"id":"f1fd6850-481e-4421-ab43-0267616ce0a2","name":"Transcribe Voice to Text","type":"@n8n/n8n-nodes-langchain.openAi","position":[992,128],"typeVersion":1.8},{"parameters":{"assignments":{"assignments":[{"id":"b324a329-3c49-4f7f-b683-74331b7fe7f8","name":"=text","type":"string","value":"={{$json.message.text}}"}]},"options":{}},"id":"b82218a9-b6ba-45a1-bdb5-2a1123172c24","name":"Prepare for LLM","type":"n8n-nodes-base.set","position":[880,352],"typeVersion":3.4},{"parameters":{"jsonSchemaExample":"  {\n    \"content\": \"Send out invitations.\",\n    \"priority\": 3\n  }"},"id":"2b11cd61-3b97-4db4-ab33-15ff5fde15d3","name":"Extract Tasks","type":"@n8n/n8n-nodes-langchain.outputParserStructured","position":[1488,512],"typeVersion":1.2},{"parameters":{"project":{"__rl":true,"mode":"list","value":"2349786654","cachedResultName":"Task"},"content":"={{ $json.output.content }}","options":{"priority":"={{ $json.output.priority }}"}},"id":"f7cc5bbf-44c3-4302-87aa-fdee32a886a3","name":"Create Todoist Tasks","type":"n8n-nodes-base.todoist","position":[1888,288],"typeVersion":2.1,"credentials":{"todoistApi":{"id":"cbe9oZHHHeSxCOdh","name":"Todoist account"}}},{"parameters":{"chatId":"={{ $('Receive Telegram Messages').item.json.message.chat.id }}","text":"=Task : {{ $json.content }} Task Link :{{ $json.url }}","additionalFields":{}},"id":"9f84cf63-e8a7-4abd-881b-286abf3af5a5","name":"Send Confirmation","type":"n8n-nodes-base.telegram","position":[2144,288],"webhookId":"5699aecd-e061-4b7f-af7b-4a23eb7201c6","typeVersion":1.2},{"parameters":{"content":" \n**This workflow listens for incoming voice or text messages from Telegram users.** ","height":320,"width":260},"id":"44b343f1-5160-4c09-9919-42979c09f68e","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","position":[0,0],"typeVersion":1},{"parameters":{"content":" **Voice messages are fetched from Telegram and transcribed into text using OpenAI's Whisper API.**  ","height":260,"width":460},"id":"da2a954b-a989-4d3b-bcb9-b10a1a78e103","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","position":[704,32],"typeVersion":1},{"parameters":{"content":" \n**The LLM (OpenAI Chat Model) analyzes the text and breaks it down into tasks and sub-tasks, formatted for Todoist.**  ","height":440,"width":380},"id":"7a833fb9-41fa-4c1c-85b7-be532fcadd31","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","position":[1264,192],"typeVersion":1}],"connections":{"Extract Tasks":{"ai_outputParser":[[{"node":"Basic LLM Chain","type":"ai_outputParser","index":0}]]},"Voice or Text?":{"main":[[{"node":"Fetch Voice Message","type":"main","index":0}],[{"node":"Prepare for LLM","type":"main","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"Create Todoist Tasks","type":"main","index":0}]]},"Prepare for LLM":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Fetch Voice Message":{"main":[[{"node":"Transcribe Voice to Text","type":"main","index":0}]]},"Create Todoist Tasks":{"main":[[{"node":"Send Confirmation","type":"main","index":0}]]},"Transcribe Voice to Text":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"Receive Telegram Messages":{"main":[[{"node":"Voice or Text?","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"98934ad2-5bd9-4133-8149-a1253cb3c57e","triggerCount":0,"tags":[]}